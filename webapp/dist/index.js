"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _config = _interopRequireDefault(require("./config"));

var _http = _interopRequireDefault(require("http"));

var _express = _interopRequireDefault(require("express"));

var _morgan = _interopRequireDefault(require("morgan"));

var _chalk = _interopRequireDefault(require("chalk"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _cors = _interopRequireDefault(require("cors"));

var _path = _interopRequireDefault(require("path"));

var _mongoose = _interopRequireDefault(require("mongoose"));

var _swaggerJsdoc = _interopRequireDefault(require("swagger-jsdoc"));

var _swaggerUiExpress = _interopRequireDefault(require("swagger-ui-express"));

var _passport = _interopRequireDefault(require("passport"));

var _routes = _interopRequireDefault(require("./api/v1/routes"));

var _utilities = require("./utilities");

var _database = require("./api/v1/database");

/* eslint-disable import/order */

/*
Import configuration
*/

/*
Import the external libraries:
- http
- https
- express
- morgan
- chalk
- body-parser
- cors
- path
- ejs
- mongoose
- swagger
- passport
*/

/* import https from 'https'; */

/*
Import internal libraries
- apiV1Router
- logger
- Seeder
*/
// Mongoose (MongoDb port)
var mongoDbConnectionString = _config.default.mongoDbConnectionstring;

_mongoose.default.connect(mongoDbConnectionString, {
  useNewUrlParser: true,
  useCreateIndex: true
});

var db = _mongoose.default.connection;
db.on('error', function () {
  _utilities.logger.log({
    level: 'error',
    message: 'MongoDb connection error'
  });
});
db.on('connected', function () {
  _utilities.logger.log({
    level: 'info',
    message: 'MongoDb connected'
  });
}); // Morgan middleware

var morganMiddleware = (0, _morgan.default)(function (tokens, req, res) {
  ['\n', _chalk.default.hex('#ff4757').bold('🍄  Morgan --> '), _chalk.default.hex('#34ace0').bold(tokens.method(req, res)), _chalk.default.hex('#ffb142').bold(tokens.status(req, res)), _chalk.default.hex('#ff5252').bold(tokens.url(req, res)), _chalk.default.hex('#2ed573').bold("".concat(tokens['response-time'](req, res), "  ms")), _chalk.default.hex('#f78fb3').bold("@ ".concat(tokens.date(req, res))), _chalk.default.yellow(tokens['remote-addr'](req, res)), _chalk.default.hex('#fffa65').bold("from ".concat(tokens.referrer(req, res))), _chalk.default.hex('#1e90ff')(tokens['user-agent'](req, res)), ''].join(' ');
}); // Cors options

var corsOption = {
  origin: true,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true,
  exposedHeaders: ['x-auth-token']
}; // Swagger options

var swaggerOptions = {
  swaggerDefinition: {
    info: {
      title: 'NMD MERN TEMPLATE API',
      version: '1.0.0',
      description: 'The Express API with autogenerated swagger doc'
    }
  },
  apis: [_path.default.join(__dirname, './api/v1/routes/*.js')]
};
var swaggerSpecs = (0, _swaggerJsdoc.default)(swaggerOptions); // Create the express application

var app = (0, _express.default)();

if (_config.default.nodeEnvironment === 'Development') {
  app.use(morganMiddleware);
}

app.use((0, _cors.default)(corsOption));
app.use(_bodyParser.default.urlencoded({
  limit: '50mb',
  extended: true
}));
app.use(_bodyParser.default.json({
  limit: '50mb',
  keepExtensions: true
}));
app.set('views', _path.default.join(__dirname, 'views')); // Set the default views directory to views folder

app.set('view engine', 'ejs'); // Set the view engine to ejs

if (_config.default.nodeEnvironment === 'Production') {
  app.use(_express.default.static(_path.default.join(__dirname, 'client')));
} else {
  app.use(_express.default.static(_path.default.join(__dirname, '/../client/build')));
}

app.use(_passport.default.initialize());
app.use('/static', _express.default.static(_path.default.join(__dirname, 'assets')));
app.use('/api/v1', _routes.default);
app.use('/api/v1/docs', _swaggerUiExpress.default.serve, _swaggerUiExpress.default.setup(swaggerSpecs));
app.get('/swagger.json', function (req, res) {
  res.setHeader('Content-Type', 'application/json');
  res.send(swaggerSpecs);
});
app.get('/docs', function (req, res) {
  res.render('redoc', {});
});
app.get('*', function (req, res) {
  if (_config.default.nodeEnvironment === 'Production') {
    res.sendFile(_path.default.join(__dirname, './client/index.html'));
  } else {
    res.sendFile(_path.default.join(__dirname, '/../client/build/index.html'));
  }
}); // Global Application Error Handler

app.use(function (error, req, res, next) {
  res.status(error.status || 500);
  var obj = {
    error: {
      message: error.message,
      status: error.status,
      timestamp: new Date().getTime()
    }
  };

  _utilities.logger.log({
    level: 'error',
    message: "".concat(obj.error.message)
  });

  if (req.xhr) {
    res.json(obj);
  } else if (!req.xhr && error.status === 404) {
    res.render('404', obj);
  } else {
    res.render('error', obj);
  }

  return next();
}); // Create the http Node.js server

var httpServer = _http.default.Server(app); // Launch the http server: ip and port


httpServer.listen(_config.default.nodePort, _config.default.nodeHostname, function () {
  _utilities.logger.log({
    level: 'info',
    message: "Server is running at http://".concat(_config.default.nodeHostname, ":").concat(_config.default.nodePort, " !")
  });
});

if (_config.default.nodeEnvironment === 'Development') {
  var seeder = new _database.Seeder();
  seeder.seed();
} // Export our app for testing purposes


var _default = app;
exports.default = _default;